<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 1999-2006 NetDimensions Ltd.

  All rights reserved.

  This document is the confidential and proprietary information of NetDimensions
  Ltd. ("Confidential Information").  You shall not disclose such Confidential
  Information and shall use it only in accordance with the terms of the license
  agreement you entered into with NetDimensions.
-->
<!-- This is the XML Schema for the EKP deployment descriptor. -->
<xs:schema xmlns="http://www.netdimensions.com/xml/ns/components"
           targetNamespace="http://www.netdimensions.com/xml/ns/components"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified">
  <!--
    The access-level element contains the type of access required to access the
    transaction.

    The access-level element must be one of the following:
                    <access-level>ReadAccess</access-level>
                    <access-level>WriteAccess</access-level>

    Used in: transaction
  -->
  <xs:element name="access-level" type="xs:string"/>
  <!--
    The cacheable element indicates that a browser may store a cached copy of any
    page generated by a transaction.

    Used in: transaction
  -->
  <xs:element name="cacheable">
    <xs:complexType/>
  </xs:element>
  <!--
    The class element contains the fully-qualified name of the transaction's class.

    Used in: transaction

    Example:
                    <class>com.netdimen.tx.test.StartTest</class>
  -->
  <xs:element name="class" type="xs:string" />
  <!-- The components element is the root element of the deployment descriptor. -->
  <xs:element name="components">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="charts"/>
        <xs:element ref="reports"/>
        <xs:element ref="transactions"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    The container-transaction specifies whether the container will automatically
    manage transaction demarcation on behalf of the component.

    Used in: transaction
  -->
  <xs:element name="container-transaction" type="xs:boolean"/>
  <!--
    The nonblocking-transaction specifies whether the TX is allowed to
    perform a dirty read.

    Used in: transaction
  -->
  <xs:element name="nonblocking-transaction" type="xs:boolean"/>
  <!--
    The feature element specifies the EKP feature to which the transaction belongs.

    Used in: transaction

    Example:
                    <feature>Tests</feature>
  -->
  <xs:element name="feature" type="xs:string"/>
  
  
  
  <xs:element name="indicator">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="indicator-code"/>
        <xs:element ref="indicator-class"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="indicator-code" type="xs:integer"/>
  <xs:element name="indicator-class" type="xs:string"/>

  <xs:element name="charts">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="indicator"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>  
  
  <!--
    The report element declares a report. The declaration consists of a report name
    and the name of the implementation class.

    Used in: components
  -->
  <xs:element name="report">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="report-name"/>
        <xs:element ref="report-class"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    The report-class elements contains the fully-qualified name of the report's
    class.

    Used in: report
  -->
  <xs:element name="report-class" type="xs:string"/>
  <!--
    The report-name element contains a unique name used to identifiy the report.

    Used in: report
  -->
  <xs:element name="report-name" type="xs:string"/>
  <!--
    The reports element contains a list of reports.

    Used in: components
  -->
  <xs:element name="reports">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="report"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
    <!--
      The requires-authentication element specifies whether the transaction requires
      authentication.

      The requires-authentication element must be one of the following:
                      <requires-authentication>true</requires-authentication>
                      <requires-authentication>false</requires-authentication>

      Used in: transaction
    -->
    <xs:element name="requires-authentication" type="xs:string"/>
    <!--
       The requires-e-signature element specifies whether the transaction requires
       e-signature.

       The requires-e-signature element must be one of the following:
                       <requires-e-signature>true</requires-e-signature>
                       <requires-e-signature>false</requires-e-signature>

       Used in: transaction
     -->
    <xs:element name="requires-e-signature" type="xs:boolean"/>

    <!--
      The requires-secure element indicates that the transaction must be accessed
      using a secure protocol such as HTTPS.

      Used in: transaction
    -->
    <xs:element name="requires-secure">
    <xs:complexType/>
  </xs:element>
  <!--
    The transaction element declares a transaction. The declaration consists of: a
    transaction code; a feature code; an access level code; the name of the
    implementation class; a flag indicating whether authentication is required to
    access the transaction; and the name of the resource bundle used by the
    transaction.

    Used in: transactions
  -->
  <xs:element name="transaction">
    <xs:complexType>
		<xs:sequence>
			<xs:element ref="tx-code"/>
			<xs:element minOccurs="0" ref="tx-type"/>
			<xs:element ref="feature"/>
			<xs:element ref="access-level"/>
			<xs:element ref="class"/>
			<xs:element ref="requires-authentication"/>
			<xs:element ref="requires-e-signature" minOccurs="0" maxOccurs="1"/>
			<xs:element minOccurs="0" ref="cacheable"/>
			<xs:element minOccurs="0" ref="requires-secure"/>
			<xs:element minOccurs="0" ref="container-transaction"/>
			<xs:element minOccurs="0" ref="nonblocking-transaction"/>
			<xs:element minOccurs="0" name="unsafe" type="xs:boolean"/>
			<xs:element minOccurs="0" name="parallel-tx" type="xs:boolean"/>
		</xs:sequence>
		<xs:attribute name="gadget" type="xs:boolean"/>
    </xs:complexType>
  </xs:element>
  <!--
    The transactions element contains a list of transactions.

    Used in: components
  -->
  <xs:element name="transactions">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="transaction"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    The tx-code element contains a unique code used to access the transaction.

    Used in: transaction

    Example:
                    <tx-code>STARTTEST</tx-code>
  -->
  <xs:element name="tx-code" type="xs:string"/>
  <!--
    The tx-type element identifies how a specific TX is used, thus facilitating
    creation if internal usage selection lists.  Basic values are:

    HOMEPAGE, TOPMENU, LEFTMENU, BOTTOMMENU, CATALOGFORMAT, DEFAULT

    Used in: transaction

    Example:
                    <tx-type>HOMEPAGE</tx-type>
  -->
  <xs:element name="tx-type" type="xs:string"/>
</xs:schema>
