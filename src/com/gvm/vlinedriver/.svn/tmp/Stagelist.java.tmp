package com.gvm.vlinedriver;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import com.gvm.vlinedriver.R;

import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.GridView;

public class Stagelist extends Activity {
	
	private Stagelist_adapter madapter;
	private ArrayList<String> id;
	private ArrayList<String> name;
	private ArrayList<String> desc;
	private ArrayList<String> checklistproportion;
	private ArrayList<String> assessment;
	private GridView gridview;
	
	private final int delayTime = 900000;
	private Handler myHandler = new Handler();

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.act_stagelist);
		paperList();

		madapter=new Stagelist_adapter(this, id,name,desc,checklistproportion,assessment);
		gridview=(GridView) findViewById(R.id.gridView1);
		gridview.setAdapter(madapter);
		
		//myHandler.postDelayed(closeControls, delayTime);
	}

	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.menu, menu);
		//Allow only assessor access to "Reset to Factory" item.
		TestAdapter mdbhelper=new TestAdapter(this);
		mdbhelper.open();
		Cursor cassessor=mdbhelper.assessoruserid();
		if(cassessor.getCount()>0)
		{
			menu.getItem(1).getSubMenu().getItem(3).setVisible(true);
		}
		
		return true;
	}
	
	public boolean onOptionsItemSelected(MenuItem item)
	{
		new MyMenuevent(item.toString(),this);
		return false;
	}
	public void paperList()
	{
		TestAdapter mdbhelper=new TestAdapter(this);
		id=new ArrayList<String>();
		name=new ArrayList<String>();
		desc=new ArrayList<String>();
		checklistproportion=new ArrayList<String>();
		assessment=new ArrayList<String>();
		String proportion="";
		String assessmentproportion="";
		int checklisttaskcomplete=0;
		mdbhelper.open();
		//SQLiteDatabase db=openOrCreateDatabase("vlinedatabase", MODE_PRIVATE, null);
		Cursor c=mdbhelper.stagelist();
		//Cursor c=db.rawQuery("SELECT * FROM stage",null);
		if(c.getCount()>0)
		{
			c.moveToFirst();
			do
			{
				id.add(c.getString(c.getColumnIndex("Id")));
				name.add(c.getString(c.getColumnIndex("name")));
				desc.add(c.getString(c.getColumnIndex("desc")));
				
				//Count all checklist for each stage and count how many of them is completed
				/*For counting checklist is complete or no? we should check all checklist tasks of each checklist if all 
				of them is complete then means checklist is complete but even one of them is not complete then 
				checklist is not complete 
				How we undrestand one task is complete or not? there should be one checked on unguided part*/
				//Cursor callchecklist=db.rawQuery("select checklist.checknum from checklist inner join subjectchecklist on checklist.checknum=subjectchecklist .checknum join subject on subject.Id=subjectchecklist.subjectId join assessment on subject.assessmentId=assessment.Id join stage on assessment.stageId=stage.Id where stage.Id='"+c.getString(c.getColumnIndex("Id"))+"' GROUP BY checklist.checknum", null);
				
				//We should count checklistindex
				Cursor callchecklist=mdbhelper.getallchecklistindex(c.getString(c.getColumnIndex("Id")));
				checklisttaskcomplete=0;
					if(callchecklist.moveToFirst())
					{
						do
						{
							//For each checklist we count all checklisttask and all checklistTaskcompleted So if number of them are same and number of checklist task is not 0 means checklist is completed otherwise is not completed
							Cursor calltask=mdbhelper.getallchecklisttask(callchecklist.getString(callchecklist.getColumnIndex("checknum")));
							Cursor ccomptask=mdbhelper.getchecklisttaskcmp(callchecklist.getString(callchecklist.getColumnIndex("checknum")));
							int alltask=calltask.getCount();
							int comptask=ccomptask.getCount();
							
								if((alltask==comptask) && alltask!=0)
								{
									checklisttaskcomplete++;
								}
						}
						while(callchecklist.moveToNext());
					}
				
				int allchecklist=callchecklist.getCount();
				if(allchecklist==0)
				{
					proportion ="";
				}
				else
				{
					proportion ="Checklist ("+checklisttaskcomplete+"/"+allchecklist+" )";
				}
				checklistproportion.add(proportion);
				
				//count assessment completed
				Cursor callassessment=mdbhelper.getallsessment(c.getString(c.getColumnIndex("Id")));
				Cursor cassessmentcmp=mdbhelper.getassessmentcmp(c.getString(c.getColumnIndex("Id")));
				if(callassessment.getCount()==0)
				{
					assessmentproportion="";
				}
				else
				{
					assessmentproportion="Assessment ("+cassessmentcmp.getCount() +"/"+callassessment.getCount() +")";
				}
				assessment.add(assessmentproportion.toString());
			}
			while(c.moveToNext());
		}

	}
	
	public static class GenerateCsv {
	    public static FileWriter generateCsvFile(File sFileName,String fileContent) {
	        FileWriter writer = null;

	        try {
	            writer = new FileWriter(sFileName);
	            writer.append(fileContent);
	                         writer.flush();

	        } catch (IOException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        }finally
	        {
	            try {
	                writer.close();
	            } catch (IOException e) {
	                // TODO Auto-generated catch block
	                e.printStackTrace();
	            }
	        }
	        return writer;
	    }
	}
	
	public void onBackPressed() {
		
	}
	
	private Runnable closeControls = new Runnable() {
		
	    public void run() {
	    	
	    	Intent intent = new Intent(Stagelist.this, Loginact.class);
	    	intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
	    	intent.putExtra("EXIT", true);
	    	startActivity(intent);
	    	
	        System.exit(0);
	    }
	};

}
