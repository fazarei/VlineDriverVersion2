package com.gvm.vlinedriver;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;

import com.gvm.vlinedriver.R;

import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.Intent;
import android.database.Cursor;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;

public class ChecklistTask extends Activity {
	
	private ChecklistTask_adapter madapter;
	private ArrayList<String> id;
	private ArrayList<String> checknumdb;
	private ArrayList<String> groupname;
	private ArrayList<String> name;
	private ArrayList<String> taskgroupvisible;
	private String checknum;
	public boolean[] chbstateinstructed;
	public boolean[] chbstategna;
	public boolean[] chbstategd;
	public boolean[] chbstatege;
	public boolean[] chbstateunna;
	public boolean[] chbstateund;
	public boolean[] chbstateune;
	private String editableachive="true";
	private String trainee="";
	private String assessor="";
	private String trainer="";
	private String trainerguide="";
	private String trainerunguide="";
	private String trainerinstruction="";
	private String taskguide="true";
	private String role="";
	
	private GridView gridview;
	final Calendar myCalendar=Calendar.getInstance();
	
	private final int delayTime = 900000;
	private Handler myHandler = new Handler();

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.act_checklisttask);
		
		myHandler.postDelayed(closeControls, delayTime);
		
		final TestAdapter mDbHelper = new TestAdapter(this); 
		mDbHelper.open();
		
		final TextView tvdchecklistnama=(TextView) findViewById(R.id.textView17);
		final EditText edtraineedate=(EditText) findViewById(R.id.editText1);
		final EditText edtrainerdate=(EditText) findViewById(R.id.editText2);
		final CheckBox chbtraineesig=(CheckBox) findViewById(R.id.checkBox1);
		final CheckBox chbtrainersig=(CheckBox) findViewById(R.id.checkBox2);
		final TextView tvungtrainer=(TextView) findViewById(R.id.textView13);
		Button bsave=(Button) findViewById(R.id.button1);

		final ImageView ivtraineedate=(ImageView) findViewById(R.id.imageView1);
		final ImageView ivtrainerdate=(ImageView) findViewById(R.id.imageView2);
		
		checknum=getIntent().getStringExtra("checknum");

		//get trainee username
		Cursor ctraineeusername=mDbHelper.traineexist();
		
		if(ctraineeusername.getCount()>0)
		{
			ctraineeusername.moveToFirst();
			trainee=ctraineeusername.getString(ctraineeusername.getColumnIndex("username"));
		}
		//Get assessor username
		Cursor cassessorusername=mDbHelper.assessoruserid();
		if(cassessorusername.getCount()>0)
		{
			cassessorusername.moveToFirst();
			assessor=cassessorusername.getString(cassessorusername.getColumnIndex("username"));
		}
		//Get trainer username who is login 
		Cursor ctrainerusername=mDbHelper.traineruserid();
		if(ctrainerusername.getCount()>0)
		{
			ctrainerusername.moveToFirst();
			trainer=ctrainerusername.getString(ctrainerusername.getColumnIndex("username"));
		}
		
		//Load data for namr of the checklist
		Cursor cgetcheckname=mDbHelper.getchackname(checknum);
		if(cgetcheckname.getCount()>0)
		{
			cgetcheckname.moveToFirst();
			tvdchecklistnama.setText(checknum+" _ "+cgetcheckname.getString(cgetcheckname.getColumnIndex("name")));
		}
		
		//Load date for top of the page
				Cursor cloaddata =mDbHelper.getchecklisttrainer(checknum);				
				
				if(cloaddata.getCount()>0)
					{
						cloaddata.moveToFirst();
						trainerguide=cloaddata.getString(cloaddata.getColumnIndex("trainerguide"));
						trainerunguide=cloaddata.getString(cloaddata.getColumnIndex("trainerunguide"));
						trainerinstruction=cloaddata.getString(cloaddata.getColumnIndex("trainerinstruction"));	
						if(cloaddata.getString(cloaddata.getColumnIndex("unguidetrainerfullname"))!=null)
						{
						tvungtrainer.setText("Trainer Name: "+cloaddata.getString(cloaddata.getColumnIndex("unguidetrainerfullname")));
						}
						edtraineedate.setText(cloaddata.getString(cloaddata.getColumnIndex("tasktraineedate")));
						//We fill these data and  unguide trainer has access to them
						edtrainerdate.setText(cloaddata.getString(cloaddata.getColumnIndex("tasktrainerdate")));
						
						if(cloaddata.getString(cloaddata.getColumnIndex("tasktraineesig"))!=null && cloaddata.getString(cloaddata.getColumnIndex("tasktraineesig")).equalsIgnoreCase("true"))
						{
							chbtraineesig.setChecked(true);
						}
						if(cloaddata.getString(cloaddata.getColumnIndex("tasktrainersig"))!=null && cloaddata.getString(cloaddata.getColumnIndex("tasktrainersig")).equalsIgnoreCase("true"))
						{
							chbtrainersig.setChecked(true);
						}
					}
		//Get role of user and permission
		Cursor crole=mDbHelper.userexist();
		if(crole.getCount()>0)
		{
			crole.moveToFirst();
			role=crole.getString(crole.getColumnIndex("role"));
			if(crole.getString(crole.getColumnIndex("role")).equalsIgnoreCase("assessor"))
			{				
				bsave.setVisibility(View.VISIBLE);
				
				chbtraineesig.setEnabled(true);
				chbtrainersig.setEnabled(true);
				ivtraineedate.setVisibility(View.VISIBLE);
				ivtrainerdate.setVisibility(View.VISIBLE);				
			}
			if(crole.getString(crole.getColumnIndex("role")).equalsIgnoreCase("trainer"))
			{	
				if((trainerunguide==null) ||(trainerunguide.isEmpty()) || (crole.getString(crole.getColumnIndex("username")).equalsIgnoreCase(trainerunguide)))
				{
					chbtrainersig.setEnabled(true);
					ivtrainerdate.setVisibility(View.VISIBLE);		
				}
				bsave.setVisibility(View.VISIBLE);				
				chbtraineesig.setEnabled(true);
				ivtraineedate.setVisibility(View.VISIBLE);				
			}
			
		}
		//Fill gridview
		paperList();
		madapter=new ChecklistTask_adapter(this, id, checknumdb, groupname, name, chbstateinstructed
				,chbstategna,chbstategd,chbstatege,chbstateunna,chbstateund,chbstateune,editableachive,trainee,assessor,trainer,taskguide,role,trainerguide,trainerunguide,trainerinstruction,taskgroupvisible);
		
		gridview=(GridView) findViewById(R.id.gridView1);
		gridview.setAdapter(madapter);
		
		//Save data in top of the page
		bsave.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
				String traineesig="false";
				String trainersig="false";
				if(chbtraineesig.isChecked())
					{	traineesig="true";	}
				if(chbtrainersig.isChecked())
					{	
						trainersig="true";	
					}
				//If nobody worked on the unguide before we save current trainer as a unguide trainer
				if(trainerunguide==null)
				{
					mDbHelper.checklistapprove(ChecklistTask.this,traineesig, edtraineedate.getText().toString(), trainersig, edtrainerdate.getText().toString(), checknum,trainee,trainer,assessor);
				}
				else
				{
					mDbHelper.checklistapprove(ChecklistTask.this,traineesig, edtraineedate.getText().toString(), trainersig, edtrainerdate.getText().toString(), checknum,trainee,trainerunguide,assessor);
				}
			}
		});
		
		final DatePickerDialog.OnDateSetListener traineedate=new DatePickerDialog.OnDateSetListener() {
			
			EditText etdate=(EditText) findViewById(R.id.editText1);
			public void onDateSet(DatePicker view, int year, int monthOfYear,
					int dayOfMonth) {
				myCalendar.set(Calendar.YEAR, year);
				myCalendar.set(Calendar.MONTH, monthOfYear);
				myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
				updateLabel(etdate);
			}
		};	
		
		ivtraineedate.setOnClickListener(new OnClickListener() {
			
			public void onClick(View v) {
				new DatePickerDialog(ChecklistTask.this, traineedate, myCalendar
	                    .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
	                    myCalendar.get(Calendar.DAY_OF_MONTH)).show();
			}
		});
		
		final DatePickerDialog.OnDateSetListener trainerdate=new DatePickerDialog.OnDateSetListener() {
			
			EditText etdate=(EditText) findViewById(R.id.editText2);
			public void onDateSet(DatePicker view, int year, int monthOfYear,
					int dayOfMonth) {
				myCalendar.set(Calendar.YEAR, year);
				myCalendar.set(Calendar.MONTH, monthOfYear);
				myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
				updateLabel(etdate);
			}
		};	
		
		ivtrainerdate.setOnClickListener(new OnClickListener() {
			
			public void onClick(View v) {
				new DatePickerDialog(ChecklistTask.this, trainerdate, myCalendar
	                    .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
	                    myCalendar.get(Calendar.DAY_OF_MONTH)).show();
			}
		});
	}
	
	private void updateLabel(EditText et) {

	    String myFormat = "dd/MM/yyyy"; //In which you need put here
	    SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
	    
	    et.setText(sdf.format(myCalendar.getTime()));
	    }
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.act_checklisttask, menu);
		
		return true;
	}
	
	
	public void paperList()
	{
		TestAdapter mdbHelper=new TestAdapter(this);
		mdbHelper.open();
		id=new ArrayList<String>();
		checknumdb=new ArrayList<String>();
		groupname=new ArrayList<String>();
		name=new ArrayList<String>();
		taskgroupvisible=new ArrayList<String>();

		Cursor c=mdbHelper.getallchecklisttask(checknum);
		int arraysize=c.getCount();		
		chbstateinstructed=new boolean[arraysize];
		chbstategna=new boolean[arraysize];
		chbstategd=new boolean[arraysize];
		chbstatege=new boolean[arraysize];
		chbstateunna=new boolean[arraysize];
		chbstateund=new boolean[arraysize];
		chbstateune=new boolean[arraysize];
		//we need row number because we need to know which cell of array is true or false and each cell is for one row
		int rownumber=0;
		if(c.getCount()>0)
		{
			String taskgroupuniqe="";
			c.moveToFirst();
			do
			{
				id.add(c.getString(c.getColumnIndex("Id")));
				checknumdb.add(c.getString(c.getColumnIndex("checknum")));
				if(c.getString(c.getColumnIndex("taskgroup")).equalsIgnoreCase(taskgroupuniqe))
				{
					groupname.add("");
					taskgroupvisible.add("GONE");
				}
				else
				{
					groupname.add(c.getString(c.getColumnIndex("taskgroup")));
					taskgroupuniqe=c.getString(c.getColumnIndex("taskgroup"));
					taskgroupvisible.add("VISIBLE");
				}
				
				name.add(c.getString(c.getColumnIndex("name")));
				
				if(c.getString(c.getColumnIndex("instructed")).equalsIgnoreCase("true"))
					{chbstateinstructed[rownumber]=true;}
				if(c.getString(c.getColumnIndex("gna")).equalsIgnoreCase("true"))
					{chbstategna[rownumber]=true;}
				if(c.getString(c.getColumnIndex("gd")).equalsIgnoreCase("true"))
					{chbstategd[rownumber]=true;}
				if(c.getString(c.getColumnIndex("ge")).equalsIgnoreCase("true"))
					{chbstatege[rownumber]=true;}
				if(c.getString(c.getColumnIndex("unna")).equalsIgnoreCase("true"))
					{chbstateunna[rownumber]=true;}
				if(c.getString(c.getColumnIndex("und")).equalsIgnoreCase("true"))
					{chbstateund[rownumber]=true;}
				if(c.getString(c.getColumnIndex("une")).equalsIgnoreCase("true"))
					{chbstateune[rownumber]=true;}
				
				rownumber=rownumber+1;
			}
			while(c.moveToNext());
		}
	}
	
	private Runnable closeControls = new Runnable() {
		
	    public void run() {
	    	
	    	Intent intent = new Intent(ChecklistTask.this, Loginact.class);
	    	intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
	    	intent.putExtra("EXIT", true);
	    	startActivity(intent);
	    	
	        System.exit(0);
	    }
	};

}
